<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1686" onload="init(evt)" viewBox="0 0 1200 1686" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1686" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1669.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1669.00"> </text><svg id="frames" x="10" width="1180" total_samples="946"><g><title>libdyld.dylib`dyld4::LibSystemHelpers::getenv (1 samples, 0.11%)</title><rect x="0.0000%" y="1605" width="0.1057%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1615.50"></text></g><g><title>libsystem_c.dylib`exit (1 samples, 0.11%)</title><rect x="0.0000%" y="1589" width="0.1057%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1599.50"></text></g><g><title>dyld`dyld4::RuntimeState::_finalizeListTLV (1 samples, 0.11%)</title><rect x="0.0000%" y="1573" width="0.1057%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1583.50"></text></g><g><title>dyld`invocation function for block in dyld4::RuntimeState::_finalizeListTLV (1 samples, 0.11%)</title><rect x="0.0000%" y="1557" width="0.1057%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1567.50"></text></g><g><title>rinha`std::sys_common::thread_info::THREAD_INFO::__getit::destroy (1 samples, 0.11%)</title><rect x="0.0000%" y="1541" width="0.1057%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1551.50"></text></g><g><title>dyld`start (2 samples, 0.21%)</title><rect x="0.0000%" y="1621" width="0.2114%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="2"/><text x="0.2500%" y="1631.50"></text></g><g><title>rinha`main (1 samples, 0.11%)</title><rect x="0.1057%" y="1605" width="0.1057%" height="15" fill="rgb(207,160,47)" fg:x="1" fg:w="1"/><text x="0.3557%" y="1615.50"></text></g><g><title>rinha`std::rt::lang_start_internal (1 samples, 0.11%)</title><rect x="0.1057%" y="1589" width="0.1057%" height="15" fill="rgb(228,23,34)" fg:x="1" fg:w="1"/><text x="0.3557%" y="1599.50"></text></g><g><title>rinha`std::rt::lang_start::_{{closure}} (1 samples, 0.11%)</title><rect x="0.1057%" y="1573" width="0.1057%" height="15" fill="rgb(218,30,26)" fg:x="1" fg:w="1"/><text x="0.3557%" y="1583.50"></text></g><g><title>rinha`std::sys_common::backtrace::__rust_begin_short_backtrace (1 samples, 0.11%)</title><rect x="0.1057%" y="1557" width="0.1057%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="1"/><text x="0.3557%" y="1567.50"></text></g><g><title>rinha`rinha::main (1 samples, 0.11%)</title><rect x="0.1057%" y="1541" width="0.1057%" height="15" fill="rgb(250,228,42)" fg:x="1" fg:w="1"/><text x="0.3557%" y="1551.50"></text></g><g><title>rinha`rinha::parser::parse_or_report (1 samples, 0.11%)</title><rect x="0.1057%" y="1525" width="0.1057%" height="15" fill="rgb(240,193,28)" fg:x="1" fg:w="1"/><text x="0.3557%" y="1535.50"></text></g><g><title>rinha`lalrpop_util::lexer::MatcherBuilder::new (1 samples, 0.11%)</title><rect x="0.1057%" y="1509" width="0.1057%" height="15" fill="rgb(216,20,37)" fg:x="1" fg:w="1"/><text x="0.3557%" y="1519.50"></text></g><g><title>rinha`regex::regexset::string::RegexSet::new (1 samples, 0.11%)</title><rect x="0.1057%" y="1493" width="0.1057%" height="15" fill="rgb(206,188,39)" fg:x="1" fg:w="1"/><text x="0.3557%" y="1503.50"></text></g><g><title>rinha`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.11%)</title><rect x="0.1057%" y="1477" width="0.1057%" height="15" fill="rgb(217,207,13)" fg:x="1" fg:w="1"/><text x="0.3557%" y="1487.50"></text></g><g><title>rinha`regex::regex::string::Regex::new (1 samples, 0.11%)</title><rect x="0.1057%" y="1461" width="0.1057%" height="15" fill="rgb(231,73,38)" fg:x="1" fg:w="1"/><text x="0.3557%" y="1471.50"></text></g><g><title>rinha`regex::builders::Builder::build_one_string (1 samples, 0.11%)</title><rect x="0.1057%" y="1445" width="0.1057%" height="15" fill="rgb(225,20,46)" fg:x="1" fg:w="1"/><text x="0.3557%" y="1455.50"></text></g><g><title>rinha`regex_automata::meta::regex::Builder::build (1 samples, 0.11%)</title><rect x="0.1057%" y="1429" width="0.1057%" height="15" fill="rgb(210,31,41)" fg:x="1" fg:w="1"/><text x="0.3557%" y="1439.50"></text></g><g><title>rinha`regex_syntax::ast::parse::Parser::parse (1 samples, 0.11%)</title><rect x="0.1057%" y="1413" width="0.1057%" height="15" fill="rgb(221,200,47)" fg:x="1" fg:w="1"/><text x="0.3557%" y="1423.50"></text></g><g><title>rinha`regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (1 samples, 0.11%)</title><rect x="0.1057%" y="1397" width="0.1057%" height="15" fill="rgb(226,26,5)" fg:x="1" fg:w="1"/><text x="0.3557%" y="1407.50"></text></g><g><title>rinha`&lt;rinha::lambda_compiler::Value as core::clone::Clone&gt;::clone (2 samples, 0.21%)</title><rect x="0.2114%" y="149" width="0.2114%" height="15" fill="rgb(249,33,26)" fg:x="2" fg:w="2"/><text x="0.4614%" y="159.50"></text></g><g><title>rinha`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.21%)</title><rect x="0.2114%" y="133" width="0.2114%" height="15" fill="rgb(235,183,28)" fg:x="2" fg:w="2"/><text x="0.4614%" y="143.50"></text></g><g><title>rinha`&lt;rinha::lambda_compiler::Value as core::clone::Clone&gt;::clone (2 samples, 0.21%)</title><rect x="0.2114%" y="117" width="0.2114%" height="15" fill="rgb(221,5,38)" fg:x="2" fg:w="2"/><text x="0.4614%" y="127.50"></text></g><g><title>rinha`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.21%)</title><rect x="0.2114%" y="101" width="0.2114%" height="15" fill="rgb(247,18,42)" fg:x="2" fg:w="2"/><text x="0.4614%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.21%)</title><rect x="0.2114%" y="85" width="0.2114%" height="15" fill="rgb(241,131,45)" fg:x="2" fg:w="2"/><text x="0.4614%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.21%)</title><rect x="0.2114%" y="69" width="0.2114%" height="15" fill="rgb(249,31,29)" fg:x="2" fg:w="2"/><text x="0.4614%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (2 samples, 0.21%)</title><rect x="0.2114%" y="53" width="0.2114%" height="15" fill="rgb(225,111,53)" fg:x="2" fg:w="2"/><text x="0.4614%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (2 samples, 0.21%)</title><rect x="0.2114%" y="37" width="0.2114%" height="15" fill="rgb(238,160,17)" fg:x="2" fg:w="2"/><text x="0.4614%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (2 samples, 0.21%)</title><rect x="0.4228%" y="37" width="0.2114%" height="15" fill="rgb(214,148,48)" fg:x="4" fg:w="2"/><text x="0.6728%" y="47.50"></text></g><g><title>rinha`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.32%)</title><rect x="0.4228%" y="133" width="0.3171%" height="15" fill="rgb(232,36,49)" fg:x="4" fg:w="3"/><text x="0.6728%" y="143.50"></text></g><g><title>rinha`core::ptr::drop_in_place&lt;rinha::lambda_compiler::Value&gt; (3 samples, 0.32%)</title><rect x="0.4228%" y="117" width="0.3171%" height="15" fill="rgb(209,103,24)" fg:x="4" fg:w="3"/><text x="0.6728%" y="127.50"></text></g><g><title>rinha`core::ptr::drop_in_place&lt;rinha::lambda_compiler::Value&gt; (3 samples, 0.32%)</title><rect x="0.4228%" y="101" width="0.3171%" height="15" fill="rgb(229,88,8)" fg:x="4" fg:w="3"/><text x="0.6728%" y="111.50"></text></g><g><title>rinha`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (3 samples, 0.32%)</title><rect x="0.4228%" y="85" width="0.3171%" height="15" fill="rgb(213,181,19)" fg:x="4" fg:w="3"/><text x="0.6728%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (3 samples, 0.32%)</title><rect x="0.4228%" y="69" width="0.3171%" height="15" fill="rgb(254,191,54)" fg:x="4" fg:w="3"/><text x="0.6728%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (3 samples, 0.32%)</title><rect x="0.4228%" y="53" width="0.3171%" height="15" fill="rgb(241,83,37)" fg:x="4" fg:w="3"/><text x="0.6728%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.11%)</title><rect x="0.6342%" y="37" width="0.1057%" height="15" fill="rgb(233,36,39)" fg:x="6" fg:w="1"/><text x="0.8842%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (14 samples, 1.48%)</title><rect x="0.7400%" y="37" width="1.4799%" height="15" fill="rgb(226,3,54)" fg:x="7" fg:w="14"/><text x="0.9900%" y="47.50"></text></g><g><title>rinha`&lt;rinha::lambda_compiler::Value as core::clone::Clone&gt;::clone (24 samples, 2.54%)</title><rect x="0.7400%" y="133" width="2.5370%" height="15" fill="rgb(245,192,40)" fg:x="7" fg:w="24"/><text x="0.9900%" y="143.50">ri..</text></g><g><title>rinha`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (24 samples, 2.54%)</title><rect x="0.7400%" y="117" width="2.5370%" height="15" fill="rgb(238,167,29)" fg:x="7" fg:w="24"/><text x="0.9900%" y="127.50">ri..</text></g><g><title>rinha`&lt;rinha::lambda_compiler::Value as core::clone::Clone&gt;::clone (24 samples, 2.54%)</title><rect x="0.7400%" y="101" width="2.5370%" height="15" fill="rgb(232,182,51)" fg:x="7" fg:w="24"/><text x="0.9900%" y="111.50">ri..</text></g><g><title>rinha`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (24 samples, 2.54%)</title><rect x="0.7400%" y="85" width="2.5370%" height="15" fill="rgb(231,60,39)" fg:x="7" fg:w="24"/><text x="0.9900%" y="95.50">ri..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (24 samples, 2.54%)</title><rect x="0.7400%" y="69" width="2.5370%" height="15" fill="rgb(208,69,12)" fg:x="7" fg:w="24"/><text x="0.9900%" y="79.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (24 samples, 2.54%)</title><rect x="0.7400%" y="53" width="2.5370%" height="15" fill="rgb(235,93,37)" fg:x="7" fg:w="24"/><text x="0.9900%" y="63.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (10 samples, 1.06%)</title><rect x="2.2199%" y="37" width="1.0571%" height="15" fill="rgb(213,116,39)" fg:x="21" fg:w="10"/><text x="2.4699%" y="47.50"></text></g><g><title>rinha`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.11%)</title><rect x="3.2770%" y="101" width="0.1057%" height="15" fill="rgb(222,207,29)" fg:x="31" fg:w="1"/><text x="3.5270%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.11%)</title><rect x="3.2770%" y="85" width="0.1057%" height="15" fill="rgb(206,96,30)" fg:x="31" fg:w="1"/><text x="3.5270%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.11%)</title><rect x="3.2770%" y="69" width="0.1057%" height="15" fill="rgb(218,138,4)" fg:x="31" fg:w="1"/><text x="3.5270%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_scan_madvise_free (1 samples, 0.11%)</title><rect x="3.2770%" y="53" width="0.1057%" height="15" fill="rgb(250,191,14)" fg:x="31" fg:w="1"/><text x="3.5270%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.11%)</title><rect x="3.2770%" y="37" width="0.1057%" height="15" fill="rgb(239,60,40)" fg:x="31" fg:w="1"/><text x="3.5270%" y="47.50"></text></g><g><title>rinha`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.85%)</title><rect x="3.2770%" y="117" width="0.8457%" height="15" fill="rgb(206,27,48)" fg:x="31" fg:w="8"/><text x="3.5270%" y="127.50"></text></g><g><title>rinha`core::ptr::drop_in_place&lt;rinha::lambda_compiler::Value&gt; (7 samples, 0.74%)</title><rect x="3.3827%" y="101" width="0.7400%" height="15" fill="rgb(225,35,8)" fg:x="32" fg:w="7"/><text x="3.6327%" y="111.50"></text></g><g><title>rinha`core::ptr::drop_in_place&lt;rinha::lambda_compiler::Value&gt; (7 samples, 0.74%)</title><rect x="3.3827%" y="85" width="0.7400%" height="15" fill="rgb(250,213,24)" fg:x="32" fg:w="7"/><text x="3.6327%" y="95.50"></text></g><g><title>rinha`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (7 samples, 0.74%)</title><rect x="3.3827%" y="69" width="0.7400%" height="15" fill="rgb(247,123,22)" fg:x="32" fg:w="7"/><text x="3.6327%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (7 samples, 0.74%)</title><rect x="3.3827%" y="53" width="0.7400%" height="15" fill="rgb(231,138,38)" fg:x="32" fg:w="7"/><text x="3.6327%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (7 samples, 0.74%)</title><rect x="3.3827%" y="37" width="0.7400%" height="15" fill="rgb(231,145,46)" fg:x="32" fg:w="7"/><text x="3.6327%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.21%)</title><rect x="4.1226%" y="85" width="0.2114%" height="15" fill="rgb(251,118,11)" fg:x="39" fg:w="2"/><text x="4.3726%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.21%)</title><rect x="4.1226%" y="69" width="0.2114%" height="15" fill="rgb(217,147,25)" fg:x="39" fg:w="2"/><text x="4.3726%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (2 samples, 0.21%)</title><rect x="4.1226%" y="53" width="0.2114%" height="15" fill="rgb(247,81,37)" fg:x="39" fg:w="2"/><text x="4.3726%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (2 samples, 0.21%)</title><rect x="4.1226%" y="37" width="0.2114%" height="15" fill="rgb(209,12,38)" fg:x="39" fg:w="2"/><text x="4.3726%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (5 samples, 0.53%)</title><rect x="4.3340%" y="37" width="0.5285%" height="15" fill="rgb(227,1,9)" fg:x="41" fg:w="5"/><text x="4.5840%" y="47.50"></text></g><g><title>rinha`&lt;rinha::lambda_compiler::Value as core::clone::Clone&gt;::clone (12 samples, 1.27%)</title><rect x="4.1226%" y="117" width="1.2685%" height="15" fill="rgb(248,47,43)" fg:x="39" fg:w="12"/><text x="4.3726%" y="127.50"></text></g><g><title>rinha`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (12 samples, 1.27%)</title><rect x="4.1226%" y="101" width="1.2685%" height="15" fill="rgb(221,10,30)" fg:x="39" fg:w="12"/><text x="4.3726%" y="111.50"></text></g><g><title>rinha`&lt;rinha::lambda_compiler::Value as core::clone::Clone&gt;::clone (10 samples, 1.06%)</title><rect x="4.3340%" y="85" width="1.0571%" height="15" fill="rgb(210,229,1)" fg:x="41" fg:w="10"/><text x="4.5840%" y="95.50"></text></g><g><title>rinha`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (10 samples, 1.06%)</title><rect x="4.3340%" y="69" width="1.0571%" height="15" fill="rgb(222,148,37)" fg:x="41" fg:w="10"/><text x="4.5840%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (10 samples, 1.06%)</title><rect x="4.3340%" y="53" width="1.0571%" height="15" fill="rgb(234,67,33)" fg:x="41" fg:w="10"/><text x="4.5840%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (5 samples, 0.53%)</title><rect x="4.8626%" y="37" width="0.5285%" height="15" fill="rgb(247,98,35)" fg:x="46" fg:w="5"/><text x="5.1126%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (3 samples, 0.32%)</title><rect x="5.3911%" y="37" width="0.3171%" height="15" fill="rgb(247,138,52)" fg:x="51" fg:w="3"/><text x="5.6411%" y="47.50"></text></g><g><title>rinha`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (6 samples, 0.63%)</title><rect x="5.3911%" y="85" width="0.6342%" height="15" fill="rgb(213,79,30)" fg:x="51" fg:w="6"/><text x="5.6411%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (6 samples, 0.63%)</title><rect x="5.3911%" y="69" width="0.6342%" height="15" fill="rgb(246,177,23)" fg:x="51" fg:w="6"/><text x="5.6411%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (6 samples, 0.63%)</title><rect x="5.3911%" y="53" width="0.6342%" height="15" fill="rgb(230,62,27)" fg:x="51" fg:w="6"/><text x="5.6411%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (3 samples, 0.32%)</title><rect x="5.7082%" y="37" width="0.3171%" height="15" fill="rgb(216,154,8)" fg:x="54" fg:w="3"/><text x="5.9582%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (2 samples, 0.21%)</title><rect x="6.0254%" y="37" width="0.2114%" height="15" fill="rgb(244,35,45)" fg:x="57" fg:w="2"/><text x="6.2754%" y="47.50"></text></g><g><title>rinha`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (16 samples, 1.69%)</title><rect x="6.0254%" y="69" width="1.6913%" height="15" fill="rgb(251,115,12)" fg:x="57" fg:w="16"/><text x="6.2754%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (16 samples, 1.69%)</title><rect x="6.0254%" y="53" width="1.6913%" height="15" fill="rgb(240,54,50)" fg:x="57" fg:w="16"/><text x="6.2754%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (14 samples, 1.48%)</title><rect x="6.2368%" y="37" width="1.4799%" height="15" fill="rgb(233,84,52)" fg:x="59" fg:w="14"/><text x="6.4868%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memset (2 samples, 0.21%)</title><rect x="7.7167%" y="37" width="0.2114%" height="15" fill="rgb(207,117,47)" fg:x="73" fg:w="2"/><text x="7.9667%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.11%)</title><rect x="7.9281%" y="37" width="0.1057%" height="15" fill="rgb(249,43,39)" fg:x="75" fg:w="1"/><text x="8.1781%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (9 samples, 0.95%)</title><rect x="8.0338%" y="37" width="0.9514%" height="15" fill="rgb(209,38,44)" fg:x="76" fg:w="9"/><text x="8.2838%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.11%)</title><rect x="8.9852%" y="37" width="0.1057%" height="15" fill="rgb(236,212,23)" fg:x="85" fg:w="1"/><text x="9.2352%" y="47.50"></text></g><g><title>rinha`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (14 samples, 1.48%)</title><rect x="7.7167%" y="53" width="1.4799%" height="15" fill="rgb(242,79,21)" fg:x="73" fg:w="14"/><text x="7.9667%" y="63.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.11%)</title><rect x="9.0909%" y="37" width="0.1057%" height="15" fill="rgb(211,96,35)" fg:x="86" fg:w="1"/><text x="9.3409%" y="47.50"></text></g><g><title>rinha`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (38 samples, 4.02%)</title><rect x="5.3911%" y="101" width="4.0169%" height="15" fill="rgb(253,215,40)" fg:x="51" fg:w="38"/><text x="5.6411%" y="111.50">rinh..</text></g><g><title>rinha`core::ptr::drop_in_place&lt;rinha::lambda_compiler::Value&gt; (32 samples, 3.38%)</title><rect x="6.0254%" y="85" width="3.3827%" height="15" fill="rgb(211,81,21)" fg:x="57" fg:w="32"/><text x="6.2754%" y="95.50">rin..</text></g><g><title>rinha`core::ptr::drop_in_place&lt;rinha::lambda_compiler::Value&gt; (16 samples, 1.69%)</title><rect x="7.7167%" y="69" width="1.6913%" height="15" fill="rgb(208,190,38)" fg:x="73" fg:w="16"/><text x="7.9667%" y="79.50"></text></g><g><title>rinha`core::ptr::drop_in_place&lt;rinha::lambda_compiler::Value&gt; (2 samples, 0.21%)</title><rect x="9.1966%" y="53" width="0.2114%" height="15" fill="rgb(235,213,38)" fg:x="87" fg:w="2"/><text x="9.4466%" y="63.50"></text></g><g><title>rinha`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.21%)</title><rect x="9.1966%" y="37" width="0.2114%" height="15" fill="rgb(237,122,38)" fg:x="87" fg:w="2"/><text x="9.4466%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (4 samples, 0.42%)</title><rect x="9.4080%" y="37" width="0.4228%" height="15" fill="rgb(244,218,35)" fg:x="89" fg:w="4"/><text x="9.6580%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (18 samples, 1.90%)</title><rect x="9.4080%" y="69" width="1.9027%" height="15" fill="rgb(240,68,47)" fg:x="89" fg:w="18"/><text x="9.6580%" y="79.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (18 samples, 1.90%)</title><rect x="9.4080%" y="53" width="1.9027%" height="15" fill="rgb(210,16,53)" fg:x="89" fg:w="18"/><text x="9.6580%" y="63.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (14 samples, 1.48%)</title><rect x="9.8309%" y="37" width="1.4799%" height="15" fill="rgb(235,124,12)" fg:x="93" fg:w="14"/><text x="10.0809%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.11%)</title><rect x="11.3108%" y="37" width="0.1057%" height="15" fill="rgb(224,169,11)" fg:x="107" fg:w="1"/><text x="11.5608%" y="47.50"></text></g><g><title>rinha`&lt;rinha::lambda_compiler::Value as core::clone::Clone&gt;::clone (21 samples, 2.22%)</title><rect x="9.4080%" y="101" width="2.2199%" height="15" fill="rgb(250,166,2)" fg:x="89" fg:w="21"/><text x="9.6580%" y="111.50">r..</text></g><g><title>rinha`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (21 samples, 2.22%)</title><rect x="9.4080%" y="85" width="2.2199%" height="15" fill="rgb(242,216,29)" fg:x="89" fg:w="21"/><text x="9.6580%" y="95.50">r..</text></g><g><title>rinha`&lt;rinha::lambda_compiler::Value as core::clone::Clone&gt;::clone (3 samples, 0.32%)</title><rect x="11.3108%" y="69" width="0.3171%" height="15" fill="rgb(230,116,27)" fg:x="107" fg:w="3"/><text x="11.5608%" y="79.50"></text></g><g><title>rinha`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.32%)</title><rect x="11.3108%" y="53" width="0.3171%" height="15" fill="rgb(228,99,48)" fg:x="107" fg:w="3"/><text x="11.5608%" y="63.50"></text></g><g><title>rinha`&lt;rinha::lambda_compiler::Value as core::clone::Clone&gt;::clone (2 samples, 0.21%)</title><rect x="11.4165%" y="37" width="0.2114%" height="15" fill="rgb(253,11,6)" fg:x="108" fg:w="2"/><text x="11.6665%" y="47.50"></text></g><g><title>rinha`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.21%)</title><rect x="11.6279%" y="101" width="0.2114%" height="15" fill="rgb(247,143,39)" fg:x="110" fg:w="2"/><text x="11.8779%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.21%)</title><rect x="11.6279%" y="85" width="0.2114%" height="15" fill="rgb(236,97,10)" fg:x="110" fg:w="2"/><text x="11.8779%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.21%)</title><rect x="11.6279%" y="69" width="0.2114%" height="15" fill="rgb(233,208,19)" fg:x="110" fg:w="2"/><text x="11.8779%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (2 samples, 0.21%)</title><rect x="11.6279%" y="53" width="0.2114%" height="15" fill="rgb(216,164,2)" fg:x="110" fg:w="2"/><text x="11.8779%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (2 samples, 0.21%)</title><rect x="11.6279%" y="37" width="0.2114%" height="15" fill="rgb(220,129,5)" fg:x="110" fg:w="2"/><text x="11.8779%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (4 samples, 0.42%)</title><rect x="11.8393%" y="37" width="0.4228%" height="15" fill="rgb(242,17,10)" fg:x="112" fg:w="4"/><text x="12.0893%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.11%)</title><rect x="12.2622%" y="37" width="0.1057%" height="15" fill="rgb(242,107,0)" fg:x="116" fg:w="1"/><text x="12.5122%" y="47.50"></text></g><g><title>rinha`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (23 samples, 2.43%)</title><rect x="11.8393%" y="69" width="2.4313%" height="15" fill="rgb(251,28,31)" fg:x="112" fg:w="23"/><text x="12.0893%" y="79.50">ri..</text></g><g><title>libsystem_malloc.dylib`free_tiny (23 samples, 2.43%)</title><rect x="11.8393%" y="53" width="2.4313%" height="15" fill="rgb(233,223,10)" fg:x="112" fg:w="23"/><text x="12.0893%" y="63.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (18 samples, 1.90%)</title><rect x="12.3679%" y="37" width="1.9027%" height="15" fill="rgb(215,21,27)" fg:x="117" fg:w="18"/><text x="12.6179%" y="47.50">l..</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.21%)</title><rect x="14.2706%" y="37" width="0.2114%" height="15" fill="rgb(232,23,21)" fg:x="135" fg:w="2"/><text x="14.5206%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (3 samples, 0.32%)</title><rect x="14.4820%" y="37" width="0.3171%" height="15" fill="rgb(244,5,23)" fg:x="137" fg:w="3"/><text x="14.7320%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (13 samples, 1.37%)</title><rect x="14.7992%" y="37" width="1.3742%" height="15" fill="rgb(226,81,46)" fg:x="140" fg:w="13"/><text x="15.0492%" y="47.50"></text></g><g><title>rinha`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (23 samples, 2.43%)</title><rect x="14.2706%" y="53" width="2.4313%" height="15" fill="rgb(247,70,30)" fg:x="135" fg:w="23"/><text x="14.5206%" y="63.50">ri..</text></g><g><title>libsystem_platform.dylib`_platform_memset (5 samples, 0.53%)</title><rect x="16.1734%" y="37" width="0.5285%" height="15" fill="rgb(212,68,19)" fg:x="153" fg:w="5"/><text x="16.4234%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (4 samples, 0.42%)</title><rect x="16.7019%" y="37" width="0.4228%" height="15" fill="rgb(240,187,13)" fg:x="158" fg:w="4"/><text x="16.9519%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.11%)</title><rect x="17.1247%" y="37" width="0.1057%" height="15" fill="rgb(223,113,26)" fg:x="162" fg:w="1"/><text x="17.3747%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.21%)</title><rect x="17.2304%" y="37" width="0.2114%" height="15" fill="rgb(206,192,2)" fg:x="163" fg:w="2"/><text x="17.4804%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.11%)</title><rect x="17.4419%" y="37" width="0.1057%" height="15" fill="rgb(241,108,4)" fg:x="165" fg:w="1"/><text x="17.6919%" y="47.50"></text></g><g><title>rinha`DYLD-STUB$$free (2 samples, 0.21%)</title><rect x="17.5476%" y="37" width="0.2114%" height="15" fill="rgb(247,173,49)" fg:x="166" fg:w="2"/><text x="17.7976%" y="47.50"></text></g><g><title>rinha`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (6 samples, 0.63%)</title><rect x="17.7590%" y="37" width="0.6342%" height="15" fill="rgb(224,114,35)" fg:x="168" fg:w="6"/><text x="18.0090%" y="47.50"></text></g><g><title>rinha`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (64 samples, 6.77%)</title><rect x="11.8393%" y="85" width="6.7653%" height="15" fill="rgb(245,159,27)" fg:x="112" fg:w="64"/><text x="12.0893%" y="95.50">rinha`&lt;al..</text></g><g><title>rinha`core::ptr::drop_in_place&lt;rinha::lambda_compiler::Value&gt; (41 samples, 4.33%)</title><rect x="14.2706%" y="69" width="4.3340%" height="15" fill="rgb(245,172,44)" fg:x="135" fg:w="41"/><text x="14.5206%" y="79.50">rinha..</text></g><g><title>rinha`core::ptr::drop_in_place&lt;rinha::lambda_compiler::Value&gt; (18 samples, 1.90%)</title><rect x="16.7019%" y="53" width="1.9027%" height="15" fill="rgb(236,23,11)" fg:x="158" fg:w="18"/><text x="16.9519%" y="63.50">r..</text></g><g><title>rinha`core::ptr::drop_in_place&lt;rinha::lambda_compiler::Value&gt; (2 samples, 0.21%)</title><rect x="18.3932%" y="37" width="0.2114%" height="15" fill="rgb(205,117,38)" fg:x="174" fg:w="2"/><text x="18.6432%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (7 samples, 0.74%)</title><rect x="18.6047%" y="53" width="0.7400%" height="15" fill="rgb(237,72,25)" fg:x="176" fg:w="7"/><text x="18.8547%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (7 samples, 0.74%)</title><rect x="18.6047%" y="37" width="0.7400%" height="15" fill="rgb(244,70,9)" fg:x="176" fg:w="7"/><text x="18.8547%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.11%)</title><rect x="19.3446%" y="37" width="0.1057%" height="15" fill="rgb(217,125,39)" fg:x="183" fg:w="1"/><text x="19.5946%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.11%)</title><rect x="19.4503%" y="37" width="0.1057%" height="15" fill="rgb(235,36,10)" fg:x="184" fg:w="1"/><text x="19.7003%" y="47.50"></text></g><g><title>rinha`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.32%)</title><rect x="19.5560%" y="37" width="0.3171%" height="15" fill="rgb(251,123,47)" fg:x="185" fg:w="3"/><text x="19.8060%" y="47.50"></text></g><g><title>rinha`&lt;rinha::lambda_compiler::Value as core::clone::Clone&gt;::clone (13 samples, 1.37%)</title><rect x="18.6047%" y="85" width="1.3742%" height="15" fill="rgb(221,13,13)" fg:x="176" fg:w="13"/><text x="18.8547%" y="95.50"></text></g><g><title>rinha`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (13 samples, 1.37%)</title><rect x="18.6047%" y="69" width="1.3742%" height="15" fill="rgb(238,131,9)" fg:x="176" fg:w="13"/><text x="18.8547%" y="79.50"></text></g><g><title>rinha`&lt;rinha::lambda_compiler::Value as core::clone::Clone&gt;::clone (6 samples, 0.63%)</title><rect x="19.3446%" y="53" width="0.6342%" height="15" fill="rgb(211,50,8)" fg:x="183" fg:w="6"/><text x="19.5946%" y="63.50"></text></g><g><title>rinha`DYLD-STUB$$malloc (1 samples, 0.11%)</title><rect x="19.8732%" y="37" width="0.1057%" height="15" fill="rgb(245,182,24)" fg:x="188" fg:w="1"/><text x="20.1232%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (6 samples, 0.63%)</title><rect x="19.9789%" y="37" width="0.6342%" height="15" fill="rgb(242,14,37)" fg:x="189" fg:w="6"/><text x="20.2289%" y="47.50"></text></g><g><title>rinha`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (18 samples, 1.90%)</title><rect x="19.9789%" y="85" width="1.9027%" height="15" fill="rgb(246,228,12)" fg:x="189" fg:w="18"/><text x="20.2289%" y="95.50">r..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (18 samples, 1.90%)</title><rect x="19.9789%" y="69" width="1.9027%" height="15" fill="rgb(213,55,15)" fg:x="189" fg:w="18"/><text x="20.2289%" y="79.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (18 samples, 1.90%)</title><rect x="19.9789%" y="53" width="1.9027%" height="15" fill="rgb(209,9,3)" fg:x="189" fg:w="18"/><text x="20.2289%" y="63.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (12 samples, 1.27%)</title><rect x="20.6131%" y="37" width="1.2685%" height="15" fill="rgb(230,59,30)" fg:x="195" fg:w="12"/><text x="20.8631%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memset (1 samples, 0.11%)</title><rect x="21.8816%" y="37" width="0.1057%" height="15" fill="rgb(209,121,21)" fg:x="207" fg:w="1"/><text x="22.1316%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.11%)</title><rect x="21.9873%" y="37" width="0.1057%" height="15" fill="rgb(220,109,13)" fg:x="208" fg:w="1"/><text x="22.2373%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (15 samples, 1.59%)</title><rect x="22.0930%" y="37" width="1.5856%" height="15" fill="rgb(232,18,1)" fg:x="209" fg:w="15"/><text x="22.3430%" y="47.50"></text></g><g><title>rinha`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (28 samples, 2.96%)</title><rect x="21.8816%" y="53" width="2.9598%" height="15" fill="rgb(215,41,42)" fg:x="207" fg:w="28"/><text x="22.1316%" y="63.50">rin..</text></g><g><title>libsystem_platform.dylib`_platform_memset (11 samples, 1.16%)</title><rect x="23.6786%" y="37" width="1.1628%" height="15" fill="rgb(224,123,36)" fg:x="224" fg:w="11"/><text x="23.9286%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (4 samples, 0.42%)</title><rect x="24.8414%" y="37" width="0.4228%" height="15" fill="rgb(240,125,3)" fg:x="235" fg:w="4"/><text x="25.0914%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.11%)</title><rect x="25.2643%" y="37" width="0.1057%" height="15" fill="rgb(205,98,50)" fg:x="239" fg:w="1"/><text x="25.5143%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`free (5 samples, 0.53%)</title><rect x="25.3700%" y="37" width="0.5285%" height="15" fill="rgb(205,185,37)" fg:x="240" fg:w="5"/><text x="25.6200%" y="47.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1 samples, 0.11%)</title><rect x="25.8985%" y="37" width="0.1057%" height="15" fill="rgb(238,207,15)" fg:x="245" fg:w="1"/><text x="26.1485%" y="47.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.11%)</title><rect x="26.0042%" y="37" width="0.1057%" height="15" fill="rgb(213,199,42)" fg:x="246" fg:w="1"/><text x="26.2542%" y="47.50"></text></g><g><title>rinha`DYLD-STUB$$free (1 samples, 0.11%)</title><rect x="26.1099%" y="37" width="0.1057%" height="15" fill="rgb(235,201,11)" fg:x="247" fg:w="1"/><text x="26.3599%" y="47.50"></text></g><g><title>rinha`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (13 samples, 1.37%)</title><rect x="26.2156%" y="37" width="1.3742%" height="15" fill="rgb(207,46,11)" fg:x="248" fg:w="13"/><text x="26.4656%" y="47.50"></text></g><g><title>rinha`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (66 samples, 6.98%)</title><rect x="21.8816%" y="69" width="6.9767%" height="15" fill="rgb(241,35,35)" fg:x="207" fg:w="66"/><text x="22.1316%" y="79.50">rinha`&lt;al..</text></g><g><title>rinha`core::ptr::drop_in_place&lt;rinha::lambda_compiler::Value&gt; (38 samples, 4.02%)</title><rect x="24.8414%" y="53" width="4.0169%" height="15" fill="rgb(243,32,47)" fg:x="235" fg:w="38"/><text x="25.0914%" y="63.50">rinh..</text></g><g><title>rinha`core::ptr::drop_in_place&lt;rinha::lambda_compiler::Value&gt; (12 samples, 1.27%)</title><rect x="27.5899%" y="37" width="1.2685%" height="15" fill="rgb(247,202,23)" fg:x="261" fg:w="12"/><text x="27.8399%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (4 samples, 0.42%)</title><rect x="28.8584%" y="37" width="0.4228%" height="15" fill="rgb(219,102,11)" fg:x="273" fg:w="4"/><text x="29.1084%" y="47.50"></text></g><g><title>rinha`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.11%)</title><rect x="29.2812%" y="37" width="0.1057%" height="15" fill="rgb(243,110,44)" fg:x="277" fg:w="1"/><text x="29.5312%" y="47.50"></text></g><g><title>rinha`&lt;rinha::lambda_compiler::Value as core::clone::Clone&gt;::clone (9 samples, 0.95%)</title><rect x="28.8584%" y="69" width="0.9514%" height="15" fill="rgb(222,74,54)" fg:x="273" fg:w="9"/><text x="29.1084%" y="79.50"></text></g><g><title>rinha`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (9 samples, 0.95%)</title><rect x="28.8584%" y="53" width="0.9514%" height="15" fill="rgb(216,99,12)" fg:x="273" fg:w="9"/><text x="29.1084%" y="63.50"></text></g><g><title>rinha`&lt;rinha::lambda_compiler::Value as core::clone::Clone&gt;::clone (4 samples, 0.42%)</title><rect x="29.3869%" y="37" width="0.4228%" height="15" fill="rgb(226,22,26)" fg:x="278" fg:w="4"/><text x="29.6369%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (2 samples, 0.21%)</title><rect x="29.8097%" y="37" width="0.2114%" height="15" fill="rgb(217,163,10)" fg:x="282" fg:w="2"/><text x="30.0597%" y="47.50"></text></g><g><title>rinha`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (8 samples, 0.85%)</title><rect x="29.8097%" y="69" width="0.8457%" height="15" fill="rgb(213,25,53)" fg:x="282" fg:w="8"/><text x="30.0597%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (8 samples, 0.85%)</title><rect x="29.8097%" y="53" width="0.8457%" height="15" fill="rgb(252,105,26)" fg:x="282" fg:w="8"/><text x="30.0597%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (6 samples, 0.63%)</title><rect x="30.0211%" y="37" width="0.6342%" height="15" fill="rgb(220,39,43)" fg:x="284" fg:w="6"/><text x="30.2711%" y="47.50"></text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_binexp::_{{closure}} (8 samples, 0.85%)</title><rect x="30.6554%" y="69" width="0.8457%" height="15" fill="rgb(229,68,48)" fg:x="290" fg:w="8"/><text x="30.9054%" y="79.50"></text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (8 samples, 0.85%)</title><rect x="30.6554%" y="53" width="0.8457%" height="15" fill="rgb(252,8,32)" fg:x="290" fg:w="8"/><text x="30.9054%" y="63.50"></text></g><g><title>rinha`&lt;rinha::lambda_compiler::Value as core::clone::Clone&gt;::clone (8 samples, 0.85%)</title><rect x="30.6554%" y="37" width="0.8457%" height="15" fill="rgb(223,20,43)" fg:x="290" fg:w="8"/><text x="30.9054%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (8 samples, 0.85%)</title><rect x="31.5011%" y="37" width="0.8457%" height="15" fill="rgb(229,81,49)" fg:x="298" fg:w="8"/><text x="31.7511%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (3 samples, 0.32%)</title><rect x="32.3467%" y="37" width="0.3171%" height="15" fill="rgb(236,28,36)" fg:x="306" fg:w="3"/><text x="32.5967%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`free (16 samples, 1.69%)</title><rect x="32.6638%" y="37" width="1.6913%" height="15" fill="rgb(249,185,26)" fg:x="309" fg:w="16"/><text x="32.9138%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.21%)</title><rect x="34.3552%" y="37" width="0.2114%" height="15" fill="rgb(249,174,33)" fg:x="325" fg:w="2"/><text x="34.6052%" y="47.50"></text></g><g><title>libsystem_platform.dylib`__bzero (3 samples, 0.32%)</title><rect x="34.5666%" y="37" width="0.3171%" height="15" fill="rgb(233,201,37)" fg:x="327" fg:w="3"/><text x="34.8166%" y="47.50"></text></g><g><title>rinha`DYLD-STUB$$free (3 samples, 0.32%)</title><rect x="34.8837%" y="37" width="0.3171%" height="15" fill="rgb(221,78,26)" fg:x="330" fg:w="3"/><text x="35.1337%" y="47.50"></text></g><g><title>rinha`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (26 samples, 2.75%)</title><rect x="35.2008%" y="37" width="2.7484%" height="15" fill="rgb(250,127,30)" fg:x="333" fg:w="26"/><text x="35.4508%" y="47.50">ri..</text></g><g><title>rinha`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (72 samples, 7.61%)</title><rect x="31.5011%" y="53" width="7.6110%" height="15" fill="rgb(230,49,44)" fg:x="298" fg:w="72"/><text x="31.7511%" y="63.50">rinha`&lt;all..</text></g><g><title>rinha`core::ptr::drop_in_place&lt;rinha::lambda_compiler::Value&gt; (11 samples, 1.16%)</title><rect x="37.9493%" y="37" width="1.1628%" height="15" fill="rgb(229,67,23)" fg:x="359" fg:w="11"/><text x="38.1993%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.42%)</title><rect x="39.1121%" y="37" width="0.4228%" height="15" fill="rgb(249,83,47)" fg:x="370" fg:w="4"/><text x="39.3621%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.11%)</title><rect x="39.5349%" y="37" width="0.1057%" height="15" fill="rgb(215,43,3)" fg:x="374" fg:w="1"/><text x="39.7849%" y="47.50"></text></g><g><title>rinha`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (9 samples, 0.95%)</title><rect x="39.6406%" y="37" width="0.9514%" height="15" fill="rgb(238,154,13)" fg:x="375" fg:w="9"/><text x="39.8906%" y="47.50"></text></g><g><title>rinha`&lt;rinha::lambda_compiler::Value as core::clone::Clone&gt;::clone (4 samples, 0.42%)</title><rect x="40.5920%" y="37" width="0.4228%" height="15" fill="rgb(219,56,2)" fg:x="384" fg:w="4"/><text x="40.8420%" y="47.50"></text></g><g><title>rinha`DYLD-STUB$$malloc (1 samples, 0.11%)</title><rect x="41.0148%" y="37" width="0.1057%" height="15" fill="rgb(233,0,4)" fg:x="388" fg:w="1"/><text x="41.2648%" y="47.50"></text></g><g><title>rinha`&lt;rinha::lambda_compiler::Value as core::clone::Clone&gt;::clone (20 samples, 2.11%)</title><rect x="39.1121%" y="53" width="2.1142%" height="15" fill="rgb(235,30,7)" fg:x="370" fg:w="20"/><text x="39.3621%" y="63.50">r..</text></g><g><title>rinha`__rdl_alloc (1 samples, 0.11%)</title><rect x="41.1205%" y="37" width="0.1057%" height="15" fill="rgb(250,79,13)" fg:x="389" fg:w="1"/><text x="41.3705%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.11%)</title><rect x="41.2262%" y="37" width="0.1057%" height="15" fill="rgb(211,146,34)" fg:x="390" fg:w="1"/><text x="41.4762%" y="47.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (41 samples, 4.33%)</title><rect x="41.3319%" y="37" width="4.3340%" height="15" fill="rgb(228,22,38)" fg:x="391" fg:w="41"/><text x="41.5819%" y="47.50">libsy..</text></g><g><title>rinha`DYLD-STUB$$memmove (6 samples, 0.63%)</title><rect x="45.6660%" y="37" width="0.6342%" height="15" fill="rgb(235,168,5)" fg:x="432" fg:w="6"/><text x="45.9160%" y="47.50"></text></g><g><title>rinha`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (69 samples, 7.29%)</title><rect x="41.2262%" y="53" width="7.2939%" height="15" fill="rgb(221,155,16)" fg:x="390" fg:w="69"/><text x="41.4762%" y="63.50">rinha`allo..</text></g><g><title>rinha`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (21 samples, 2.22%)</title><rect x="46.3002%" y="37" width="2.2199%" height="15" fill="rgb(215,215,53)" fg:x="438" fg:w="21"/><text x="46.5502%" y="47.50">r..</text></g><g><title>libsystem_platform.dylib`_platform_memcmp (19 samples, 2.01%)</title><rect x="48.5201%" y="37" width="2.0085%" height="15" fill="rgb(223,4,10)" fg:x="459" fg:w="19"/><text x="48.7701%" y="47.50">l..</text></g><g><title>rinha`&lt;rinha::lambda_compiler::Value as core::clone::Clone&gt;::clone (3 samples, 0.32%)</title><rect x="50.5285%" y="37" width="0.3171%" height="15" fill="rgb(234,103,6)" fg:x="478" fg:w="3"/><text x="50.7785%" y="47.50"></text></g><g><title>rinha`DYLD-STUB$$memcmp (9 samples, 0.95%)</title><rect x="50.8457%" y="37" width="0.9514%" height="15" fill="rgb(227,97,0)" fg:x="481" fg:w="9"/><text x="51.0957%" y="47.50"></text></g><g><title>rinha`core::ptr::drop_in_place&lt;rinha::lambda_compiler::Value&gt; (5 samples, 0.53%)</title><rect x="51.7970%" y="37" width="0.5285%" height="15" fill="rgb(234,150,53)" fg:x="490" fg:w="5"/><text x="52.0470%" y="47.50"></text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_binexp::_{{closure}} (69 samples, 7.29%)</title><rect x="48.5201%" y="53" width="7.2939%" height="15" fill="rgb(228,201,54)" fg:x="459" fg:w="69"/><text x="48.7701%" y="63.50">rinha`rinh..</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (33 samples, 3.49%)</title><rect x="52.3256%" y="37" width="3.4884%" height="15" fill="rgb(222,22,37)" fg:x="495" fg:w="33"/><text x="52.5756%" y="47.50">rin..</text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (3 samples, 0.32%)</title><rect x="55.8140%" y="37" width="0.3171%" height="15" fill="rgb(237,53,32)" fg:x="528" fg:w="3"/><text x="56.0640%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (16 samples, 1.69%)</title><rect x="56.1311%" y="37" width="1.6913%" height="15" fill="rgb(233,25,53)" fg:x="531" fg:w="16"/><text x="56.3811%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (12 samples, 1.27%)</title><rect x="57.8224%" y="37" width="1.2685%" height="15" fill="rgb(210,40,34)" fg:x="547" fg:w="12"/><text x="58.0724%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`free (14 samples, 1.48%)</title><rect x="59.0909%" y="37" width="1.4799%" height="15" fill="rgb(241,220,44)" fg:x="559" fg:w="14"/><text x="59.3409%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (17 samples, 1.80%)</title><rect x="60.5708%" y="37" width="1.7970%" height="15" fill="rgb(235,28,35)" fg:x="573" fg:w="17"/><text x="60.8208%" y="47.50">l..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.11%)</title><rect x="62.3679%" y="37" width="0.1057%" height="15" fill="rgb(210,56,17)" fg:x="590" fg:w="1"/><text x="62.6179%" y="47.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (47 samples, 4.97%)</title><rect x="62.4736%" y="37" width="4.9683%" height="15" fill="rgb(224,130,29)" fg:x="591" fg:w="47"/><text x="62.7236%" y="47.50">libsys..</text></g><g><title>libsystem_platform.dylib`_platform_memset (5 samples, 0.53%)</title><rect x="67.4419%" y="37" width="0.5285%" height="15" fill="rgb(235,212,8)" fg:x="638" fg:w="5"/><text x="67.6919%" y="47.50"></text></g><g><title>rinha`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (7 samples, 0.74%)</title><rect x="67.9704%" y="37" width="0.7400%" height="15" fill="rgb(223,33,50)" fg:x="643" fg:w="7"/><text x="68.2204%" y="47.50"></text></g><g><title>rinha`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.74%)</title><rect x="68.7104%" y="37" width="0.7400%" height="15" fill="rgb(219,149,13)" fg:x="650" fg:w="7"/><text x="68.9604%" y="47.50"></text></g><g><title>rinha`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.42%)</title><rect x="69.4503%" y="37" width="0.4228%" height="15" fill="rgb(250,156,29)" fg:x="657" fg:w="4"/><text x="69.7003%" y="47.50"></text></g><g><title>rinha`&lt;rinha::lambda_compiler::Value as core::clone::Clone&gt;::clone (30 samples, 3.17%)</title><rect x="69.8732%" y="37" width="3.1712%" height="15" fill="rgb(216,193,19)" fg:x="661" fg:w="30"/><text x="70.1232%" y="47.50">rin..</text></g><g><title>rinha`DYLD-STUB$$free (1 samples, 0.11%)</title><rect x="73.0444%" y="37" width="0.1057%" height="15" fill="rgb(216,135,14)" fg:x="691" fg:w="1"/><text x="73.2944%" y="47.50"></text></g><g><title>rinha`DYLD-STUB$$malloc (1 samples, 0.11%)</title><rect x="73.1501%" y="37" width="0.1057%" height="15" fill="rgb(241,47,5)" fg:x="692" fg:w="1"/><text x="73.4001%" y="47.50"></text></g><g><title>rinha`DYLD-STUB$$memcmp (12 samples, 1.27%)</title><rect x="73.2558%" y="37" width="1.2685%" height="15" fill="rgb(233,42,35)" fg:x="693" fg:w="12"/><text x="73.5058%" y="47.50"></text></g><g><title>rinha`__rdl_alloc (1 samples, 0.11%)</title><rect x="74.5243%" y="37" width="0.1057%" height="15" fill="rgb(231,13,6)" fg:x="705" fg:w="1"/><text x="74.7743%" y="47.50"></text></g><g><title>rinha`__rdl_dealloc (1 samples, 0.11%)</title><rect x="74.6300%" y="37" width="0.1057%" height="15" fill="rgb(207,181,40)" fg:x="706" fg:w="1"/><text x="74.8800%" y="47.50"></text></g><g><title>rinha`__rust_alloc (1 samples, 0.11%)</title><rect x="74.7357%" y="37" width="0.1057%" height="15" fill="rgb(254,173,49)" fg:x="707" fg:w="1"/><text x="74.9857%" y="47.50"></text></g><g><title>rinha`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (79 samples, 8.35%)</title><rect x="74.8414%" y="37" width="8.3510%" height="15" fill="rgb(221,1,38)" fg:x="708" fg:w="79"/><text x="75.0914%" y="47.50">rinha`alloc:..</text></g><g><title>rinha`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (11 samples, 1.16%)</title><rect x="83.1924%" y="37" width="1.1628%" height="15" fill="rgb(206,124,46)" fg:x="787" fg:w="11"/><text x="83.4424%" y="47.50"></text></g><g><title>rinha`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (10 samples, 1.06%)</title><rect x="84.3552%" y="37" width="1.0571%" height="15" fill="rgb(249,21,11)" fg:x="798" fg:w="10"/><text x="84.6052%" y="47.50"></text></g><g><title>rinha`core::ptr::drop_in_place&lt;rinha::lambda_compiler::Value&gt; (8 samples, 0.85%)</title><rect x="85.4123%" y="37" width="0.8457%" height="15" fill="rgb(222,201,40)" fg:x="808" fg:w="8"/><text x="85.6623%" y="47.50"></text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_binexp::_{{closure}} (6 samples, 0.63%)</title><rect x="86.2579%" y="37" width="0.6342%" height="15" fill="rgb(235,61,29)" fg:x="816" fg:w="6"/><text x="86.5079%" y="47.50"></text></g><g><title>all (946 samples, 100%)</title><rect x="0.0000%" y="1637" width="100.0000%" height="15" fill="rgb(219,207,3)" fg:x="0" fg:w="946"/><text x="0.2500%" y="1647.50"></text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="1621" width="99.7886%" height="15" fill="rgb(222,56,46)" fg:x="2" fg:w="944"/><text x="0.4614%" y="1631.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="1605" width="99.7886%" height="15" fill="rgb(239,76,54)" fg:x="2" fg:w="944"/><text x="0.4614%" y="1615.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="1589" width="99.7886%" height="15" fill="rgb(231,124,27)" fg:x="2" fg:w="944"/><text x="0.4614%" y="1599.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="1573" width="99.7886%" height="15" fill="rgb(249,195,6)" fg:x="2" fg:w="944"/><text x="0.4614%" y="1583.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="1557" width="99.7886%" height="15" fill="rgb(237,174,47)" fg:x="2" fg:w="944"/><text x="0.4614%" y="1567.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="1541" width="99.7886%" height="15" fill="rgb(206,201,31)" fg:x="2" fg:w="944"/><text x="0.4614%" y="1551.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="1525" width="99.7886%" height="15" fill="rgb(231,57,52)" fg:x="2" fg:w="944"/><text x="0.4614%" y="1535.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="1509" width="99.7886%" height="15" fill="rgb(248,177,22)" fg:x="2" fg:w="944"/><text x="0.4614%" y="1519.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="1493" width="99.7886%" height="15" fill="rgb(215,211,37)" fg:x="2" fg:w="944"/><text x="0.4614%" y="1503.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="1477" width="99.7886%" height="15" fill="rgb(241,128,51)" fg:x="2" fg:w="944"/><text x="0.4614%" y="1487.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="1461" width="99.7886%" height="15" fill="rgb(227,165,31)" fg:x="2" fg:w="944"/><text x="0.4614%" y="1471.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="1445" width="99.7886%" height="15" fill="rgb(228,167,24)" fg:x="2" fg:w="944"/><text x="0.4614%" y="1455.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="1429" width="99.7886%" height="15" fill="rgb(228,143,12)" fg:x="2" fg:w="944"/><text x="0.4614%" y="1439.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="1413" width="99.7886%" height="15" fill="rgb(249,149,8)" fg:x="2" fg:w="944"/><text x="0.4614%" y="1423.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="1397" width="99.7886%" height="15" fill="rgb(243,35,44)" fg:x="2" fg:w="944"/><text x="0.4614%" y="1407.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="1381" width="99.7886%" height="15" fill="rgb(246,89,9)" fg:x="2" fg:w="944"/><text x="0.4614%" y="1391.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="1365" width="99.7886%" height="15" fill="rgb(233,213,13)" fg:x="2" fg:w="944"/><text x="0.4614%" y="1375.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="1349" width="99.7886%" height="15" fill="rgb(233,141,41)" fg:x="2" fg:w="944"/><text x="0.4614%" y="1359.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="1333" width="99.7886%" height="15" fill="rgb(239,167,4)" fg:x="2" fg:w="944"/><text x="0.4614%" y="1343.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="1317" width="99.7886%" height="15" fill="rgb(209,217,16)" fg:x="2" fg:w="944"/><text x="0.4614%" y="1327.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="1301" width="99.7886%" height="15" fill="rgb(219,88,35)" fg:x="2" fg:w="944"/><text x="0.4614%" y="1311.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="1285" width="99.7886%" height="15" fill="rgb(220,193,23)" fg:x="2" fg:w="944"/><text x="0.4614%" y="1295.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="1269" width="99.7886%" height="15" fill="rgb(230,90,52)" fg:x="2" fg:w="944"/><text x="0.4614%" y="1279.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="1253" width="99.7886%" height="15" fill="rgb(252,106,19)" fg:x="2" fg:w="944"/><text x="0.4614%" y="1263.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="1237" width="99.7886%" height="15" fill="rgb(206,74,20)" fg:x="2" fg:w="944"/><text x="0.4614%" y="1247.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="1221" width="99.7886%" height="15" fill="rgb(230,138,44)" fg:x="2" fg:w="944"/><text x="0.4614%" y="1231.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="1205" width="99.7886%" height="15" fill="rgb(235,182,43)" fg:x="2" fg:w="944"/><text x="0.4614%" y="1215.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="1189" width="99.7886%" height="15" fill="rgb(242,16,51)" fg:x="2" fg:w="944"/><text x="0.4614%" y="1199.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="1173" width="99.7886%" height="15" fill="rgb(248,9,4)" fg:x="2" fg:w="944"/><text x="0.4614%" y="1183.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="1157" width="99.7886%" height="15" fill="rgb(210,31,22)" fg:x="2" fg:w="944"/><text x="0.4614%" y="1167.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="1141" width="99.7886%" height="15" fill="rgb(239,54,39)" fg:x="2" fg:w="944"/><text x="0.4614%" y="1151.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="1125" width="99.7886%" height="15" fill="rgb(230,99,41)" fg:x="2" fg:w="944"/><text x="0.4614%" y="1135.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="1109" width="99.7886%" height="15" fill="rgb(253,106,12)" fg:x="2" fg:w="944"/><text x="0.4614%" y="1119.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="1093" width="99.7886%" height="15" fill="rgb(213,46,41)" fg:x="2" fg:w="944"/><text x="0.4614%" y="1103.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="1077" width="99.7886%" height="15" fill="rgb(215,133,35)" fg:x="2" fg:w="944"/><text x="0.4614%" y="1087.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="1061" width="99.7886%" height="15" fill="rgb(213,28,5)" fg:x="2" fg:w="944"/><text x="0.4614%" y="1071.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="1045" width="99.7886%" height="15" fill="rgb(215,77,49)" fg:x="2" fg:w="944"/><text x="0.4614%" y="1055.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="1029" width="99.7886%" height="15" fill="rgb(248,100,22)" fg:x="2" fg:w="944"/><text x="0.4614%" y="1039.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="1013" width="99.7886%" height="15" fill="rgb(208,67,9)" fg:x="2" fg:w="944"/><text x="0.4614%" y="1023.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="997" width="99.7886%" height="15" fill="rgb(219,133,21)" fg:x="2" fg:w="944"/><text x="0.4614%" y="1007.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="981" width="99.7886%" height="15" fill="rgb(246,46,29)" fg:x="2" fg:w="944"/><text x="0.4614%" y="991.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="965" width="99.7886%" height="15" fill="rgb(246,185,52)" fg:x="2" fg:w="944"/><text x="0.4614%" y="975.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="949" width="99.7886%" height="15" fill="rgb(252,136,11)" fg:x="2" fg:w="944"/><text x="0.4614%" y="959.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="933" width="99.7886%" height="15" fill="rgb(219,138,53)" fg:x="2" fg:w="944"/><text x="0.4614%" y="943.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="917" width="99.7886%" height="15" fill="rgb(211,51,23)" fg:x="2" fg:w="944"/><text x="0.4614%" y="927.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="901" width="99.7886%" height="15" fill="rgb(247,221,28)" fg:x="2" fg:w="944"/><text x="0.4614%" y="911.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="885" width="99.7886%" height="15" fill="rgb(251,222,45)" fg:x="2" fg:w="944"/><text x="0.4614%" y="895.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="869" width="99.7886%" height="15" fill="rgb(217,162,53)" fg:x="2" fg:w="944"/><text x="0.4614%" y="879.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="853" width="99.7886%" height="15" fill="rgb(229,93,14)" fg:x="2" fg:w="944"/><text x="0.4614%" y="863.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="837" width="99.7886%" height="15" fill="rgb(209,67,49)" fg:x="2" fg:w="944"/><text x="0.4614%" y="847.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="821" width="99.7886%" height="15" fill="rgb(213,87,29)" fg:x="2" fg:w="944"/><text x="0.4614%" y="831.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="805" width="99.7886%" height="15" fill="rgb(205,151,52)" fg:x="2" fg:w="944"/><text x="0.4614%" y="815.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="789" width="99.7886%" height="15" fill="rgb(253,215,39)" fg:x="2" fg:w="944"/><text x="0.4614%" y="799.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="773" width="99.7886%" height="15" fill="rgb(221,220,41)" fg:x="2" fg:w="944"/><text x="0.4614%" y="783.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="757" width="99.7886%" height="15" fill="rgb(218,133,21)" fg:x="2" fg:w="944"/><text x="0.4614%" y="767.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="741" width="99.7886%" height="15" fill="rgb(221,193,43)" fg:x="2" fg:w="944"/><text x="0.4614%" y="751.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="725" width="99.7886%" height="15" fill="rgb(240,128,52)" fg:x="2" fg:w="944"/><text x="0.4614%" y="735.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="709" width="99.7886%" height="15" fill="rgb(253,114,12)" fg:x="2" fg:w="944"/><text x="0.4614%" y="719.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="693" width="99.7886%" height="15" fill="rgb(215,223,47)" fg:x="2" fg:w="944"/><text x="0.4614%" y="703.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="677" width="99.7886%" height="15" fill="rgb(248,225,23)" fg:x="2" fg:w="944"/><text x="0.4614%" y="687.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="661" width="99.7886%" height="15" fill="rgb(250,108,0)" fg:x="2" fg:w="944"/><text x="0.4614%" y="671.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="645" width="99.7886%" height="15" fill="rgb(228,208,7)" fg:x="2" fg:w="944"/><text x="0.4614%" y="655.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="629" width="99.7886%" height="15" fill="rgb(244,45,10)" fg:x="2" fg:w="944"/><text x="0.4614%" y="639.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="613" width="99.7886%" height="15" fill="rgb(207,125,25)" fg:x="2" fg:w="944"/><text x="0.4614%" y="623.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="597" width="99.7886%" height="15" fill="rgb(210,195,18)" fg:x="2" fg:w="944"/><text x="0.4614%" y="607.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="581" width="99.7886%" height="15" fill="rgb(249,80,12)" fg:x="2" fg:w="944"/><text x="0.4614%" y="591.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="565" width="99.7886%" height="15" fill="rgb(221,65,9)" fg:x="2" fg:w="944"/><text x="0.4614%" y="575.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="549" width="99.7886%" height="15" fill="rgb(235,49,36)" fg:x="2" fg:w="944"/><text x="0.4614%" y="559.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="533" width="99.7886%" height="15" fill="rgb(225,32,20)" fg:x="2" fg:w="944"/><text x="0.4614%" y="543.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="517" width="99.7886%" height="15" fill="rgb(215,141,46)" fg:x="2" fg:w="944"/><text x="0.4614%" y="527.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="501" width="99.7886%" height="15" fill="rgb(250,160,47)" fg:x="2" fg:w="944"/><text x="0.4614%" y="511.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="485" width="99.7886%" height="15" fill="rgb(216,222,40)" fg:x="2" fg:w="944"/><text x="0.4614%" y="495.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="469" width="99.7886%" height="15" fill="rgb(234,217,39)" fg:x="2" fg:w="944"/><text x="0.4614%" y="479.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="453" width="99.7886%" height="15" fill="rgb(207,178,40)" fg:x="2" fg:w="944"/><text x="0.4614%" y="463.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="437" width="99.7886%" height="15" fill="rgb(221,136,13)" fg:x="2" fg:w="944"/><text x="0.4614%" y="447.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="421" width="99.7886%" height="15" fill="rgb(249,199,10)" fg:x="2" fg:w="944"/><text x="0.4614%" y="431.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="405" width="99.7886%" height="15" fill="rgb(249,222,13)" fg:x="2" fg:w="944"/><text x="0.4614%" y="415.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="389" width="99.7886%" height="15" fill="rgb(244,185,38)" fg:x="2" fg:w="944"/><text x="0.4614%" y="399.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="373" width="99.7886%" height="15" fill="rgb(236,202,9)" fg:x="2" fg:w="944"/><text x="0.4614%" y="383.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="357" width="99.7886%" height="15" fill="rgb(250,229,37)" fg:x="2" fg:w="944"/><text x="0.4614%" y="367.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="341" width="99.7886%" height="15" fill="rgb(206,174,23)" fg:x="2" fg:w="944"/><text x="0.4614%" y="351.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="325" width="99.7886%" height="15" fill="rgb(211,33,43)" fg:x="2" fg:w="944"/><text x="0.4614%" y="335.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="309" width="99.7886%" height="15" fill="rgb(245,58,50)" fg:x="2" fg:w="944"/><text x="0.4614%" y="319.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="293" width="99.7886%" height="15" fill="rgb(244,68,36)" fg:x="2" fg:w="944"/><text x="0.4614%" y="303.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="277" width="99.7886%" height="15" fill="rgb(232,229,15)" fg:x="2" fg:w="944"/><text x="0.4614%" y="287.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="261" width="99.7886%" height="15" fill="rgb(254,30,23)" fg:x="2" fg:w="944"/><text x="0.4614%" y="271.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="245" width="99.7886%" height="15" fill="rgb(235,160,14)" fg:x="2" fg:w="944"/><text x="0.4614%" y="255.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="229" width="99.7886%" height="15" fill="rgb(212,155,44)" fg:x="2" fg:w="944"/><text x="0.4614%" y="239.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="213" width="99.7886%" height="15" fill="rgb(226,2,50)" fg:x="2" fg:w="944"/><text x="0.4614%" y="223.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="197" width="99.7886%" height="15" fill="rgb(234,177,6)" fg:x="2" fg:w="944"/><text x="0.4614%" y="207.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="181" width="99.7886%" height="15" fill="rgb(217,24,9)" fg:x="2" fg:w="944"/><text x="0.4614%" y="191.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (944 samples, 99.79%)</title><rect x="0.2114%" y="165" width="99.7886%" height="15" fill="rgb(220,13,46)" fg:x="2" fg:w="944"/><text x="0.4614%" y="175.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (942 samples, 99.58%)</title><rect x="0.4228%" y="149" width="99.5772%" height="15" fill="rgb(239,221,27)" fg:x="4" fg:w="942"/><text x="0.6728%" y="159.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (915 samples, 96.72%)</title><rect x="3.2770%" y="133" width="96.7230%" height="15" fill="rgb(222,198,25)" fg:x="31" fg:w="915"/><text x="3.5270%" y="143.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (895 samples, 94.61%)</title><rect x="5.3911%" y="117" width="94.6089%" height="15" fill="rgb(211,99,13)" fg:x="51" fg:w="895"/><text x="5.6411%" y="127.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (834 samples, 88.16%)</title><rect x="11.8393%" y="101" width="88.1607%" height="15" fill="rgb(232,111,31)" fg:x="112" fg:w="834"/><text x="12.0893%" y="111.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (739 samples, 78.12%)</title><rect x="21.8816%" y="85" width="78.1184%" height="15" fill="rgb(245,82,37)" fg:x="207" fg:w="739"/><text x="22.1316%" y="95.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (648 samples, 68.50%)</title><rect x="31.5011%" y="69" width="68.4989%" height="15" fill="rgb(227,149,46)" fg:x="298" fg:w="648"/><text x="31.7511%" y="79.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}}</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (418 samples, 44.19%)</title><rect x="55.8140%" y="53" width="44.1860%" height="15" fill="rgb(218,36,50)" fg:x="528" fg:w="418"/><text x="56.0640%" y="63.50">rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closu..</text></g><g><title>rinha`rinha::lambda_compiler::LambdaCompiler::compile_internal::_{{closure}} (124 samples, 13.11%)</title><rect x="86.8922%" y="37" width="13.1078%" height="15" fill="rgb(226,80,48)" fg:x="822" fg:w="124"/><text x="87.1422%" y="47.50">rinha`rinha::lambda_..</text></g></svg></svg>